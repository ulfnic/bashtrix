#!/usr/bin/env bash


# Define stderr handling
bashtrix_core__stderr() {
	if [[ $1 == '0' ]]; then
		[[ $2 ]] && printf "$2" "${@:3}" 1>&2 || :
	else
		[[ $2 ]] && printf '%s'"$2" "ERROR: ${0##*/}, " "${@:3}" 1>&2 || :
	fi
}



# JSON encode variable
bashtrix_core__json_encode_var() {
	local -n 'bashtrix_core__json_encode_var__out='"$1"
	bashtrix_core__json_encode_var__out=${bashtrix_core__json_encode_var__out//\\/\\\\}
	bashtrix_core__json_encode_var__out=${bashtrix_core__json_encode_var__out//\"/\\\"} #"
	bashtrix_core__json_encode_var__out=${bashtrix_core__json_encode_var__out//$'\n'/\\n}
}



# JSON encode pipe
bashtrix_core__json_encode_pipe() {
	sed --null-data 's/\\/\\\\/g' | \
	sed --null-data 's/"/\\"/g' | \
	sed --null-data 's/\n/\\n/g'
}



# Perform login
bashtrix_core__login() {
	[[ $MATRIX__BASE_URL ]] || { bashtrix_core__stderr '%s\n' 'MATRIX__BASE_URL is empty'; return 1; }
	[[ $MATRIX__USER ]] || { bashtrix_core__stderr '%s\n' 'MATRIX__USER is empty'; return 1; }

	bashtrix_core__json_encode_var MATRIX__USER

	curl \
		-X POST \
		-d @<(
			cat <<-EOF
				{
					"identifier": {
						"type": "m.id.user",
						"user": "$MATRIX__USER"
					},
					"password": "$(cat /dev/fd/3 | bashtrix_core__json_encode_pipe)",
					"type": "m.login.password"
				}
			EOF
		) \
		"$MATRIX__BASE_URL"'/_matrix/client/v3/login'
}



